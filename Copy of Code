import random

# function definitions:
def decrypt(cipher_text):
    plain_text = ""
    i = 0
    for char in range(len(cipher_text)):
        if i < len(cipher_text):
            if i % 2 == 0:
                cipher_ascii = ord(ciphert_ext[i])
                plain_ascii = cipher_ascii - 1
                plaintext += chr(plain_ascii)
                i += 1
            else:
                cipher_ascii = ord(cipher_text[i])
                plain_ascii = cipher_ascii + 1
                plain_text += chr(plain_ascii)
                i += 1
        else:
            return plain_text
    print("\nCongratulations you won! The word was: ")
    print(plain_text)

# main code below: 
# choosing a random word from the list. this is the word that the user will have to guess
words = ['WHDSPQZ', 'XHO', 'TTDBFRT', 'QQJYF', 'ENQD', 'DNPK', 'CNTR', 'EHWHOD', 'TSVMOHOF', 'XNOCFQGTM']
secret_Word = random.choice(words)

# game beginning/introduction
print("Welcome to Hangman!")
print()
print("The word is", len(secretWord), "letters long.")
 
guesses = ""
# stores all of user's guesses, regardless if the guess was correct or incorrect
guessedLetters = []
turns = 10

while turns > 0:
    # both "turns" and "incorrect" variables will track if the user will win or lose
    incorrect = 0
    for char in secretWord:
        # "letter matching" (compare user's guess with what is in guesses)
        if char in guesses: 
            # user guesses correctly = replace blank with the letter
            print(char, end = "")
        else: 
            # user guesses incorrectly = keep the blank
            print("_", end = " ")
            incorrect += 1
    if incorrect == 0:
        # decrypt secret word (decrypt function) before revealing
        ciphertext = secretWord
        decrypt(ciphertext)
        break
    # expect user to enter only letters and nothing else
    # since decoded words are capitalized, remain consistent and keep the user's guess capitalized as well
    guess = input("\nGuess a letter: ").upper()
    # "letter matching" - compare user's guess to what is already in guesses
    guesses += guess
    if guess not in secretWord:
        # if user's guess is wrong, decrease number of turns & append user's guess into guessedLetters
        turns = turns - 1
        # check to make sure that the user didn't guess the same letter twice
        if guess in guessedLetters:
            guess = input("You already guessed that letter. Guess a different letter: ").upper()
            guessedLetters.append(guess) 
            print("Guessed Letters: ", guessedLetters)
        else: 
            guessedLetters.append(guess) 
            print("Guessed Letters: ", guessedLetters)
        # display amount of turns left
        print("\nIncorrect. You have", turns, "more guesses.")
    else:
        # still append correct letters into list of guessedLetters
        guessedLetters.append(guess)
        print("Guessed Letters: ", guessedLetters)
    if turns == 0:
        print("\nYou ran out of guesses. You lose.")
